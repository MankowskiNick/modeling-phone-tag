% Nick Mankowski
% MATH 265 - Writeup 3
% 11/26/2023

% Define a damping factor
p = 0.15;

% Define the connections
connections = {
    [ 2, 3, 4, 5 ], ...
    [ 1, 5, 6, 3 ], ...
    [ 1, 4, 8, 14 ], ...
    [ 3, 6, 5, 9, 8 ], ...
    [ 2, 4, 8, 1 ], ...
    [ 8, 7 ], ...
    [ 6 ], ...
    [ 6, 1, 5, 14 ], ...
    [ 6, 4, 10 ], ...
    [ 9, 11 ], ...
    [ 10, 12 ], ...
    [ 11, 7, 13 ], ...
    [ 12, 6 ], ...
    [ 8, 15, 3 ], ...
    [ 14, 16 ], ...
    [ 15, 1, 6 ]
};

labels = [...
    "Taylor Swift",...
    "Ed Sheeran",...
    "Selena Gomez",...
    "Ariana Grande",...
    "Justin Bieber",...
    "BeyoncÃ©",...
    "Jay-Z",...
    "Kim Kardashian",...
    "Dwayne Johnson",...
    "Kevin Hart",...
    "Ellen DeGeneres",...
    "Oprah Winfrey",...
    "Michelle Obama",...
    "Kylie Jenner",...
    "Kendall Jenner",...
    "LeBron James"
];

% Initialize an empty adjacency matrix
n = 16;
adjMatrix = zeros(n, n);

% Populate the adjacency matrix
for i = 1:length(connections)
    adjMatrix(i, connections{i}) = 1;
end

% Get our transition matrix
T = zeros(n, n);
for i = 1:length(adjMatrix)
    T(i, :) = adjMatrix(i, :) / sum(adjMatrix(i, :));
end
T = transpose(T);

% Get our initial vector
v = (1 / n) * ones(16, 1);

% Get the Google matrix
M = (1 - p) * T + (p / n) * ones(n, n);

% Calculate PageRank
prev_ratings = M * v;
% Iterate until we have approached the steady state vector
for i = 1:999 % Cut off at 999 in case we don't converge
    % Get the next ratings
    ratings = M * prev_ratings;

    % Check if the ratings have converged to steady state vector
    is_equal = true;
    for j = 1:n
        if abs(ratings(j) - prev_ratings(j)) > 0.001
            is_equal = false;
        end
    end

    % If the ratings have converged, break out of the loop
    if is_equal
        break;
    end

    % Otherwise, continue
    prev_ratings = ratings;
end

% Display the sorted results of PageRank
[sorted_ratings, sorted_indices] = sort(ratings, 'descend');
for i = 1:n
    fprintf('%s:  %f\n', labels(sorted_indices(i)), sorted_ratings(i));
end